/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.conecel.testspringboot.api;

import io.swagger.annotations.*;
import io.swagger.model.RequestUser;
import io.swagger.model.ResponseUser;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.print.attribute.standard.Media;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-29T15:16:47.707Z")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "", nickname = "createUser", notes = "Creation of users", response = ResponseUser.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful user registered", response = ResponseUser.class),
        @ApiResponse(code = 400, message = "Request error"),
        @ApiResponse(code = 500, message = "The server encountered  an unexpected condition which prevented it from fulfilling the request") })
    @RequestMapping(value = "/user",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<ResponseUser> createUser(@ApiParam(value = "NA" ,required=true )  @Valid @RequestBody RequestUser body);


    @ApiOperation(value = "", nickname = "getInfoUser", notes = "Query users", response = ResponseUser.class, tags={ "user"})
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful", response = ResponseUser.class),
        @ApiResponse(code = 400, message = "Request error"),
        @ApiResponse(code = 500, message = "The server encountered  an unexpected condition which prevented it from fulfilling the request") })
    @RequestMapping(value = "/user/{identificationId}",
    		 produces = { "application/json", "application/xml" }, 
    	        consumes = { "application/json", "application/xml" },
    	        method = RequestMethod.POST)
    ResponseEntity<ResponseUser> getInfoUser(@ApiParam(value = "NA",required=true) @PathVariable("identificationId") String identificationId);

    @PostMapping(value = "/info" , produces="application/xml" )
    @ResponseBody ResponseUser getInfoUser2(@RequestBody String identificationId);

    
}
